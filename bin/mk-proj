#!/bin/sh

set -eu
. "$HOME/.config/lib/get_github_cred.sh"
. "$HOME/.config/lib/panic.sh"

show_help() {
cat <<EOS
usage: $(basename "$0") [options] <proj_path> <proj_desc>

options:
	-f
		create <proj_path> even if it already exists
	-t (c | js | tex)
		use the given type
	-v
		explain what is being done
EOS
}

usage() {
	show_help 1>&2
	exit 1
}

f=false
g=""
t=""
v=false
while getopts "fg:t:v" opt; do
	case "$opt" in
	(f) f=true ;;
	(g) g="$OPTARG" ;;
	(t) t="$OPTARG" ;;
	(v) v=true ;;
	(*) usage ;;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
	usage
fi

note() {
	if $v; then
		echo "$1"
	fi
}

# this is NOT realpath. it just gives a path which starts with /. this might
# contain . and .. which realpath tries to avoid.
abspath() {
	echo "$(cd "$(dirname "$1")" && pwd -P)/$(basename "$1")"
}

proj_path="$(abspath "$1")"
proj_desc="$2"

if ! git_name="$(git config user.name)"; then
	panic "no git user.name found"
fi

if ! git_email="$(git config user.email)"; then
	panic "no git user.email found"
fi

proj_name="$(basename "$proj_path")"
if [ -e "$proj_name" ] && ! $f; then
	panic "'$proj_name' already exists"
fi
if echo "$proj_name" | grep -q '\s'; then
	panic "'$proj_name' has whitespace"
fi

templates="$HOME/.config/templates"
if ! [ -d "$templates/$t" ]; then
	panic "invalid type: '$t'"
fi

github_name="$(get_github_cred username)"

year="$(date +%Y)"

replace_vars() {
	cat \
		| sed "s/{{git_email}}/$git_email/g" \
		| sed "s/{{git_name}}/$git_name/g" \
		| sed "s/{{github_name}}/$github_name/g" \
		| sed "s/{{proj_desc}}/$proj_desc/g" \
		| sed "s/{{proj_name}}/$proj_name/g" \
		| sed "s/{{year}}/$year/g"
}

dst_name() {
	echo "$proj_path/$1" | replace_vars
}

add_dir() {
	b="$(basename "$1")"
	if [ "$b" = . ] || [ "$b" = .. ]; then
		return
	fi
	mkdir -p "$(dst_name "$1")"
	add_item "$1"
}

add_file() {
	cat "$1" | replace_vars >> "$(dst_name "$1")"
}

add_item() {
	for x in "$1"/* "$1"/.*; do
		if [ -d "$x" ]; then
			add_dir "$x"
		else
			add_file "$x"
		fi
	done
}

add_template() {
	note "adding template '$1'"
	cd "$templates/$1"
	add_item .
}

note "creating '$proj_name'"
mkdir -p "$proj_path/src"
add_template "_base"
if [ -n "$t" ]; then
	add_template "$t"
fi

cd "$proj_path"
sort -o .gitignore .gitignore
