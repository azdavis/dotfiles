#!/bin/sh

. "$HOME/.config/lib/base.sh"
. "$HOME/.config/lib/abort.sh"

usage() {
    abort "usage: $(basename "$0") [-p] [-t <type>] <name> <description>"
}

p=false
t=""
while getopts pt: opt; do
    case "$opt" in
    (p) p=true ;;
    (t) t="$OPTARG" ;;
    (*) usage ;;
    esac
done
shift "$(expr "$OPTIND" - 1)"

if [ $# -ne 2 ]; then
    usage
fi

if ! name="$(git config user.name)"; then
    abort "no git user.name found"
fi
if ! email="$(git config user.email)"; then
    abort "no git user.email found"
fi

proj="$1"
if [ -e "$proj" ]; then
    abort "'$proj' already exists"
fi
if echo "$proj" | grep -E '\s' > /dev/null; then
    abort "'$proj' has whitespace"
fi

templates="$HOME/.config/templates"
if ! [ -d "$templates/$t" ]; then
    abort "invalid type: '$t'"
fi

github_cred() {
    echo "hostname=github.com" \
        | git credential fill \
        | grep "$1" \
        | sed "s/$1=//g"
}

gh_username="$(github_cred username)"
gh_password="$(github_cred password)"

path="$PWD/$proj"
desc="$2"
year="$(date +%Y)"

replace() {
    cat \
        | sed "s/{{desc}}/$desc/g" \
        | sed "s/{{email}}/$email/g" \
        | sed "s/{{gh_username}}/$gh_username/g" \
        | sed "s/{{name}}/$name/g" \
        | sed "s/{{proj}}/$proj/g" \
        | sed "s/{{year}}/$year/g"
}

dst_name() {
    echo "$path/$1" | replace
}

add_dir() {
    b="$(basename "$1")"
    if [ "$b" = . ] || [ "$b" = .. ]; then
        return
    fi
    mkdir -p "$(dst_name "$1")"
    add "$1"
}

add_file() {
    cat "$1" | replace >> "$(dst_name "$1")"
}

add() {
    for x in "$1"/* "$1"/.*; do
        if [ -d "$x" ]; then
            add_dir "$x"
        else
            add_file "$x"
        fi
    done
}

add_template() {
    echo "adding template '$1'"
    cd "$templates/$1"
    add .
}


echo "creating '$proj'"
mkdir -p "$path/src"
add_template base
if [ -n "$t" ]; then
    add_template "$t"
fi

cd "$path"
sort -o .gitignore .gitignore

echo "creating '$proj/.git'"
git init -q
git add -A
git commit -q -m "start project"

# there must be spaces surrounding { and } in the json data
# e761df8a36c4e302ebda8b792f70d631b0e8452d
url="https://github.com/$gh_username/$proj.git"
echo "creating '$url'"
git remote add origin "$url"
if [ "$(curl \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Content-Type: application/json" \
    -H "Authorization: token $gh_password" \
    -X POST \
    -d " { \"name\":\"$proj\", \"description\":\"$desc\", \"private\":$p } " \
    -s \
    -o /dev/null \
    -w "%{http_code}" \
    "https://api.github.com/user/repos" \
    )" -ne 201 \
]; then
    abort "could not create"
fi
git push -q -u origin master > /dev/null
