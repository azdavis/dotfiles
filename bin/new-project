#!/bin/sh

. "$HOME/.config/lib/_base.sh"
. "$HOME/.config/lib/abort.sh"

usage() {
    cat 1>&2 <<EOS
usage: $(basename "$0") [options] <proj> <desc>

options:
    -f
        create <proj> even if it already exists
    -g (public | private)
        create a corresponding github repository with the given privacy setting
    -q
        be quiet
    -t <type>
        create a project of the given type
EOS
    exit 1
}

f=false
g=""
q=false
t=""
while getopts "fg:t:q" opt; do
    case "$opt" in
    (f) f=true ;;
    (g) g="$OPTARG" ;;
    (q) q=true ;;
    (t) t="$OPTARG" ;;
    (*) usage ;;
    esac
done
shift "$(expr "$OPTIND" - 1)"

if [ $# -ne 2 ]; then
    usage
fi

if ! name="$(git config user.name)"; then
    abort "no git user.name found"
fi
if ! email="$(git config user.email)"; then
    abort "no git user.email found"
fi

proj="$(basename "$(realpath "$1")")"
if [ -e "$proj" ] && ! $f; then
    abort "'$proj' already exists"
fi
if echo "$proj" | grep -E '\s' > /dev/null; then
    abort "'$proj' has whitespace"
fi
proj_underline=""
x="${#proj}"
while [ "$x" -gt 0 ]; do
    proj_underline="$proj_underline="
    x=$(( $x - 1 ))
done

is_private=""
if [ "$g" = private ]; then
    is_private=true
elif [ "$g" = public ]; then
    is_private=false
elif [ -n "$g" ]; then
    abort "invalid github project visibility: '$g'"
fi

templates="$HOME/.config/templates"
if ! [ -d "$templates/$t" ]; then
    abort "invalid type: '$t'"
fi

note() {
    if ! $q; then
        echo "$1"
    fi
}

github_cred() {
    echo "hostname=github.com" \
        | git credential fill \
        | grep "$1" \
        | sed "s/$1=//g"
}

gh_username="$(github_cred username)"
gh_password="$(github_cred password)"

path="$PWD/$1"
desc="$2"
year="$(date +%Y)"

replace() {
    cat \
        | sed "s/{{desc}}/$desc/g" \
        | sed "s/{{email}}/$email/g" \
        | sed "s/{{gh_username}}/$gh_username/g" \
        | sed "s/{{name}}/$name/g" \
        | sed "s/{{proj_underline}}/$proj_underline/g" \
        | sed "s/{{proj}}/$proj/g" \
        | sed "s/{{year}}/$year/g"
}

dst_name() {
    echo "$path/$1" | replace
}

add_dir() {
    b="$(basename "$1")"
    if [ "$b" = . ] || [ "$b" = .. ]; then
        return
    fi
    mkdir -p "$(dst_name "$1")"
    add "$1"
}

add_file() {
    cat "$1" | replace >> "$(dst_name "$1")"
}

add() {
    for x in "$1"/* "$1"/.*; do
        if [ -d "$x" ]; then
            add_dir "$x"
        else
            add_file "$x"
        fi
    done
}

add_template() {
    note "adding template '$1'"
    cd "$templates/$1"
    add .
}

note "creating '$proj'"
mkdir -p "$path/src"
add_template "_base"
if [ -n "$t" ]; then
    add_template "$t"
fi

cd "$path"
sort -o .gitignore .gitignore

note "creating '$proj/.git'"
git init -q
git add -A
git commit -q -m "start project"

if [ -z "$g" ]; then
    exit
fi

# there must be spaces surrounding { and } in the json data
# e761df8a36c4e302ebda8b792f70d631b0e8452d
url="https://github.com/$gh_username/$proj.git"
note "creating '$url'"
git remote add origin "$url"
if [ "$(curl \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Content-Type: application/json" \
    -H "Authorization: token $gh_password" \
    -X POST \
    -d " { \"name\":\"$proj\", \"description\":\"$desc\", \"private\":$is_private } " \
    -s \
    -o /dev/null \
    -w "%{http_code}" \
    "https://api.github.com/user/repos" \
    )" -ne 201 \
]; then
    abort "could not create"
fi
git push -q -u origin master > /dev/null
