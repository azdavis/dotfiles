#!/bin/sh

set -eu
. "$HOME/.config/lib/panic.sh"

show_help() {
cat <<EOS
usage: $(basename "$0") [options] <proj_name> <proj_desc>

options:
	-f
		create <proj_name> even if it already exists
	-g (public | private)
		create a corresponding github repository of the given privacy
	-q
		be quiet
	-t (c | node | tex)
		create a project of the given type
EOS
}

usage() {
	show_help 1>&2
	exit 1
}

f=false
g=""
q=false
t=""
while getopts "fg:t:q" opt; do
	case "$opt" in
	(f) f=true ;;
	(g) g="$OPTARG" ;;
	(q) q=true ;;
	(t) t="$OPTARG" ;;
	(*) usage ;;
	esac
done
shift $((OPTIND - 1))

if [ $# -ne 2 ]; then
	usage
fi

if ! git_name="$(git config user.name)"; then
	panic "no git user.name found"
fi
if ! git_email="$(git config user.email)"; then
	panic "no git user.email found"
fi

proj_name="$(basename "$(realpath "$1")")"
if [ -e "$proj_name" ] && ! $f; then
	panic "'$proj_name' already exists"
fi
if echo "$proj_name" | grep -E '\s' > /dev/null; then
	panic "'$proj_name' has whitespace"
fi

is_private=""
if [ "$g" = private ]; then
	is_private=true
elif [ "$g" = public ]; then
	is_private=false
elif [ -n "$g" ]; then
	panic "invalid github project visibility: '$g'"
fi

templates="$HOME/.config/templates"
if ! [ -d "$templates/$t" ]; then
	panic "invalid type: '$t'"
fi

note() {
	if $q; then
		return
	fi
	echo "$1"
}

github_cred() {
	echo "host=github.com" \
		| git credential fill \
		| grep "$1" \
		| sed "s/$1=//"
}

github_name="$(github_cred username)"
github_password="$(github_cred password)"

proj_path="$PWD/$1"
proj_desc="$2"
year="$(date +%Y)"

replace_vars() {
	cat \
		| sed "s/{{git_email}}/$git_email/g" \
		| sed "s/{{git_name}}/$git_name/g" \
		| sed "s/{{github_name}}/$github_name/g" \
		| sed "s/{{proj_desc}}/$proj_desc/g" \
		| sed "s/{{proj_name}}/$proj_name/g" \
		| sed "s/{{year}}/$year/g"
}

dst_name() {
	echo "$proj_path/$1" | replace_vars
}

add_dir() {
	b="$(basename "$1")"
	if [ "$b" = . ] || [ "$b" = .. ]; then
		return
	fi
	mkdir -p "$(dst_name "$1")"
	add_item "$1"
}

add_file() {
	cat "$1" | replace_vars >> "$(dst_name "$1")"
}

add_item() {
	for x in "$1"/* "$1"/.*; do
		if [ -d "$x" ]; then
			add_dir "$x"
		else
			add_file "$x"
		fi
	done
}

add_template() {
	note "adding template '$1'"
	cd "$templates/$1"
	add_item .
}

note "creating '$proj_name'"
mkdir -p "$proj_path/src"
add_template "_base"
if [ -n "$t" ]; then
	add_template "$t"
fi

cd "$proj_path"
sort -o .gitignore .gitignore

note "creating '$proj_name/.git'"
git init -q
git add -A
git commit -q -m "start project"

if [ -z "$g" ]; then
	exit
fi

# there must be spaces surrounding { and } in the json data
# e761df8a36c4e302ebda8b792f70d631b0e8452d
url="https://github.com/$github_name/$proj_name.git"
note "creating '$url'"
git remote add origin "$url"
if [ \
	"$(curl \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Content-Type: application/json" \
		-H "Authorization: token $github_password" \
		-X POST \
		-d " { \"name\":\"$proj_name\", \"description\":\"$proj_desc\", \"private\":$is_private } " \
		-s \
		-o /dev/null \
		-w "%{http_code}" \
		"https://api.github.com/user/repos" \
	)" -ne 201 \
]; then
	panic "could not create"
fi
git push -q -u origin master > /dev/null
